#!groovy
@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "cpo"
def component = "case-payment-orders-api"

GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
  'rpx-${env}': [
    secret('mc-idam-client-secret', 'BEFTA_OAUTH2_CLIENT_SECRET_OF_XUIWEBAPP')
  ],
  'ccd-${env}': [
    // BEFTA user: Common_User_For_Request
    secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
    secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
    secret('ccd-befta-caseworker-1-pwd', 'CCD_BEFTA_CASEWORKER_1_PWD')
  ],
  's2s-${env}': [
    secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP'),
    secret('microservicekey-payment-app', 'BEFTA_S2S_CLIENT_SECRET_OF_PAYMENT_APP')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    version    : '',
    envVariable: envVar
  ]
}


def setBeftaEnvVariables() {

  // IDAM client auth
  env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
  // :: configure `xuiwebapp` as the default value for `idamClientId`
  env.OAUTH2_CLIENT_ID = "xuiwebapp"
  env.OAUTH2_REDIRECT_URI = "https://manage-case.aat.platform.hmcts.net/oauth2/callback"
  env.OAUTH2_ACCESS_TOKEN_TYPE = "OIDC"
  env.OAUTH2_SCOPE_VARIABLES = "profile openid roles manage-user create-user"
  env.OAUTH2_CLIENT_SECRET = env.BEFTA_OAUTH2_CLIENT_SECRET_OF_XUIWEBAPP

  // S2S auth
  env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  // :: configure `xui_webapp` as the default value for `s2sClientId`
  env.BEFTA_S2S_CLIENT_ID = "xui_webapp"
  env.BEFTA_S2S_CLIENT_ID_OF_PAYMENT_APP = "payment_app"
  env.BEFTA_S2S_CLIENT_SECRET = env.BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP

  env.DEFAULT_COLLECTION_ASSERTION_MODE="UNORDERED"
  env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"
}


withPipeline(type, product, component) {
  after('test') {
    builder.gradle('integration')

    // hmcts/cnp-jenkins-library may fail to copy artifacts after checkstyle error so repeat command (see /src/uk/gov/hmcts/contino/GradleBuilder.groovy)
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/*.html'

    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/pmd/*.html'
  }

  loadVaultSecrets(secrets)

  setBeftaEnvVariables()

  enableAksStagingDeployment()
  disableLegacyDeployment()

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }
}
