plugins {
  id 'application'
  id 'idea'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.4.4'
  id 'org.owasp.dependencycheck' version '6.1.2'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
  id 'org.sonarqube' version '3.1.1'
  id 'uk.gov.hmcts.java' version '0.12.27'
}

// CWE-862
ext['spring-security.version'] = '5.6.6'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

idea {
  module {
    // config to allow Intelij to mark test source and resource files correctly to help linting tools
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

  generateCucumberReports.enabled = false

  doLast {
    generateCucumberReports.enabled = true

    javaexec {
      main = "uk.gov.hmcts.reform.cpo.befta.CasePaymentOrdersBeftaMain"
      classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = [
               '--strict',
               '--threads', '10',
               '--plugin', "json:${rootDir}/target/cucumber.json",
               '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
               '--tags', 'not @Ignore',
               '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
             ]
      // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Functional Tests/"
        new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Functional Tests"))

        logger.quiet("Functional test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Functional%20Tests/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs smoke tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

  generateCucumberReports.enabled = false

  doLast {
    generateCucumberReports.enabled = true
    javaexec {
      main = "uk.gov.hmcts.reform.cpo.befta.CasePaymentOrdersBeftaMain"
      classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = [
               '--strict',
               '--plugin', "json:${rootDir}/target/cucumber.json",
               '--plugin', "junit:${buildDir}/test-results/smoke/cucumber.xml",
               '--tags', '@Smoke and not @Ignore',
               '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
             ]
      // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Smoke Tests/"
        new File("${rootDir}/BEFTA Report for Smoke Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Smoke Tests"))

        logger.quiet("Smoke test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Smoke%20Tests/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

cucumberReports {
  outputDir = file("${rootDir}/target/cucumber")
  reports = files("${rootDir}/target/cucumber.json")
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // The line below prevents the build from failing if the Fortify scan detects issues
  ignoreExitValue = true
}

task customCleanBeftaReports(type:Delete) {
  delete "${rootDir}/BEFTA Report for Smoke Tests/"
  delete "${rootDir}/BEFTA Report for Functional Tests/"
  delete "${rootDir}/target/cucumber"
  delete "${rootDir}/target/cucumber.json"
}
tasks.clean.dependsOn(tasks.customCleanBeftaReports)


jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: cpo-case-payment-orders-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:cpo-case-payment-orders-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

def versions = [
  junit           : '5.7.1',
  junitPlatform   : '1.7.1',
  lombok          : '1.18.8',
  mapstruct       : '1.4.2.Final',
  reformLogging   : '5.1.9',
  springBoot      : springBoot.class.package.implementationVersion,
  springCloud     : '2020.0.1',
  springfoxSwagger: '3.0.0',
  testcontainers  : '1.15.2',
  tomcatEmbedded  : '9.0.63'
]

ext['spring-framework.version'] = '5.3.20'
ext['log4j2.version'] = '2.17.1'
ext['snakeyaml.version'] = '1.31'

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.68'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.1-jre') {
      entry 'guava'
    }
  }
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
  }
}

repositories {
  mavenLocal()
  maven {
    url "https://jitpack.io"
  }
  mavenCentral()
}

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.13.2'
  compile "com.fasterxml.jackson.core:jackson-databind:2.13.2.2"
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.13.2'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

  implementation "org.springframework.security:spring-security-web"
  implementation "org.springframework.security:spring-security-config"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-client:2.5.14"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:2.5.14"

  implementation group: 'io.springfox', name: 'springfox-boot-starter', version: versions.springfoxSwagger

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.3'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '2.0.1'

  implementation "com.github.ben-manes.caffeine:caffeine:3.0.1"

  implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
  implementation group: 'org.hibernate', name: 'hibernate-envers', version: '5.4.30.Final'

  implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'

  // CVE-2021-28170
  implementation group: 'org.glassfish', name: 'jakarta.el', version: '4.0.1'
  // CVE-2021-42550
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.10'

  implementation "org.apache.tomcat.embed:tomcat-embed-core:${versions.tomcatEmbedded}"
  implementation "org.apache.tomcat.embed:tomcat-embed-el:${versions.tomcatEmbedded}"
  implementation "org.apache.tomcat.embed:tomcat-embed-websocket:${versions.tomcatEmbedded}"

  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.21'

  implementation 'com.fasterxml.jackson.core:jackson-core:2.13.2'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.2'

  compile group: 'org.flywaydb', name: 'flyway-core', version: '7.7.0'

  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
  compile group: 'commons-validator', name: 'commons-validator', version: '1.7'

  // CVE-2021-29425
  compile group: 'commons-io', name: 'commons-io', version: '2.8.0'


  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  compileOnly group: 'org.mapstruct', name: 'mapstruct', version: versions.mapstruct

  annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapstruct
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  // NB: use a JSR305 implementation to import javax.annotation.meta.When enum
  compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  // groovy v3.* added to avoid 'WARNING: Illegal reflective access by org.codehaus.groovy.reflection.CachedClass'
  // in groovy:2.5.* when running functional/befta tests
  testImplementation group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.3'

  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '2.2.2.RELEASE'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers

  testImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.13.0'
  testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.7.1'
  testImplementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
  testImplementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '3.0.2'
  testCompile 'com.github.hmcts:fortify-client:1.2.1:all'
  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  runtime group: 'org.postgresql', name: 'postgresql', version: '42.4.1'
}

mainClassName = 'uk.gov.hmcts.reform.cpo.Application'

bootJar {
  getArchiveFileName().set(provider {
    'cpo-case-payment-orders-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
